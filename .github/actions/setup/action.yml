name: Setup dependencies
description: checkout repo, setup node and yarn, install node_modules

runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Detect package manager
      id: detect-package-manager
      run: |
        if [ -f "${{ github.workspace }}/yarn.lock" ]; then
          echo "manager=yarn" >> $GITHUB_OUTPUT
          echo "command=install --immutable" >> $GITHUB_OUTPUT
          echo "runner=yarn" >> $GITHUB_OUTPUT
          exit 0
        elif [ -f "${{ github.workspace }}/package.json" ]; then
          echo "manager=npm" >> $GITHUB_OUTPUT
          echo "command=ci" >> $GITHUB_OUTPUT
          echo "runner=npx --no-install" >> $GITHUB_OUTPUT
          exit 0
        else
          echo "Unable to determine package manager"
          exit 1
        fi

    - name: Setup node
      uses: actions/setup-node@v3
      with:
        node-version: "20"
        # cache is intentionally skipped, as it's faster with yarn v1 to cache node_modules.
        # cache: ${{ steps.detect-package-manager.outputs.manager }}

    - name: Restore cache for dependencies
      uses: actions/cache@v3
      id: install-cache
      with:
        # node_modules/.cache is intentionally omitted, as this is used for build tool caches.
        path: |
          node_modules
          !node_modules/.cache
        # see https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - if: steps.install-cache.outputs.cache-hit != 'true'
      name: Install dependencies
      run: ${{ steps.detect-package-manager.outputs.runner }} ${{ steps.detect-package-manager.outputs.command }}

    # uncomment this if you want to use patch-package
    # - name: Patch dependencies
    #   run: ${{ steps.detect-package-manager.outputs.runner }} patch-package
    #   shell: bash